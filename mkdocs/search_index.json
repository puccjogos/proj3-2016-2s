{
    "docs": [
        {
            "location": "/", 
            "text": "Projeto Integrado 3\n\n\n\n\n\nEste site \u00e9 a apostila digital da disciplina \nProjeto integrado 3\n, ministrada no 2\u00ba semestre de 2016 no curso de Tecnologia em Jogos Digitais da PUC-Campinas. Aqui voc\u00ea encontra os links para materiais te\u00f3ricos e pr\u00e1ticos, assim como outras informa\u00e7\u00f5es relevantes.\n\n\nCronograma\n\n\n\n\n\n\n\n\nData\n\n\nConte\u00fado\n\n\n\n\n\n\n\n\n\n\n03/08\n\n\nIntrodu\u00e7\u00e3o ao Projeto Integrado 3\n\n\n\n\n\n\n10/08\n\n\nDivis\u00e3o de grupos / \nIntrodu\u00e7\u00e3o \u00e0 arquitetura de software\n\n\n\n\n\n\n17/08\n\n\nApresenta\u00e7\u00e3o de conceitos / \nIntrodu\u00e7\u00e3o ao game design 3D\n\n\n\n\n\n\n24/08\n\n\nPlaytest 1 (prot\u00f3tipos)\n\n\n\n\n\n\n31/08\n\n\nGreenlight de projetos\n\n\n\n\n\n\n07/09\n\n\nFeriado\n\n\n\n\n\n\n14/09\n\n\nSemana Integrada\n\n\n\n\n\n\n21/09\n\n\nVersionamento e controle de qualidade\n\n\n\n\n\n\n28/09\n\n\nPlaytest 2 (primeiro jog\u00e1vel)\n\n\n\n\n\n\n05/10\n\n\nGame design 3D: c\u00e2meras\n\n\n\n\n\n\n12/10\n\n\nFeriado\n\n\n\n\n\n\n19/10\n\n\nGame design 3D: workflow\n\n\n\n\n\n\n26/10\n\n\nPlaytest 3 (alfa)\n\n\n\n\n\n\n02/11\n\n\nFeriado\n\n\n\n\n\n\n09/11\n\n\nGame design 3D: shaders\n\n\n\n\n\n\n16/11\n\n\nPlaytest 4 (beta)\n\n\n\n\n\n\n23/11\n\n\nApresenta\u00e7\u00f5es\n\n\n\n\n\n\n30/11\n\n\nApresenta\u00e7\u00f5es\n\n\n\n\n\n\n07/12\n\n\nSess\u00e3o de jogos e debate\n\n\n\n\n\n\n14/12\n\n\nFechamento da disciplina\n\n\n\n\n\n\n\n\nPlano de ensino\n\n\nEmenta\n\n\nCorrelacionar os conte\u00fados das disciplinas ministradas at\u00e9 o momento, e direcionar o conte\u00fado apreendido para a pr\u00e1tica profissional. Normas da ABNT. Relat\u00f3rio T\u00e9cnico de apresenta\u00e7\u00e3o de trabalhos. Desenvolvimento de trilhas sonoras e aberturas de jogos digitais.\n\n\nObjetivos gerais\n\n\nIniciar a produ\u00e7\u00e3o do projeto final reunindo as t\u00e9cnicas apreendidas em outras disciplinas.\n\n\nObjetivos espec\u00edficos\n\n\nReunir os conhecimentos apreendidos em outras disciplinas; Elucidar como as pr\u00e1ticas que ocorrem em outras disciplinas se reunem na elabora\u00e7\u00e3o do jogo Estudar elementos fundamentais do desenvolvimento do Projeto de Jogo.\n\n\nConte\u00fado program\u00e1tico\n\n\n\n\nAbordagens e discuss\u00f5es sobre os projetos em desenvolvimento em semestres anteriores:\n\n\nBuscando ideias diferentes e inovadoras para desenvolver\n\n\n\n\n\n\nDesenvolvendo o Projeto de game: retomando ou iniciando a documenta\u00e7\u00e3o do projeto \n\n\nArte e programa\u00e7\u00e3o: estudo do material j\u00e1 executado para continuidade de projeto j\u00e1 iniciado em disciplinas de Projeto Integrado anterior.\n\n\nDesenvolvimento do conte\u00fado visual e estrutura do jogo: do jogo \u00e0 sua divulga\u00e7\u00e3o;\n\n\nUnindo som e imagem para composi\u00e7\u00e3o do jogo\n\n\n\n\nAvalia\u00e7\u00e3o\n\n\nA avalia\u00e7\u00e3o ser\u00e1 constitu\u00edda de 3 componentes principais:\n\n\n\n\nAvalia\u00e7\u00e3o continuada individual\n: atividades entregues no decorre da disciplina, abordando t\u00f3picos tratados em sala.\n\n\nAvalia\u00e7\u00e3o continuada coletiva\n: atividades entregues no decorrer da disciplina, tratando do desenvolvimento de projetos coletivos\n\n\nAvalia\u00e7\u00e3o final coletiva\n: entrega e apresenta\u00e7\u00e3o de portfolio final de projeto\n\n\n\n\nNota final\n\n\n(Atividades individuais x 3) + (Atividades coletivas x 3) + (Portf\u00f3lio final x 4)\n\n\nRecupera\u00e7\u00e3o\n\n\nAs atividades com avalia\u00e7\u00e3o insuficiente poder\u00e3o ser refeitas e entregues em novas datas para nova avalia\u00e7\u00e3o. Ser\u00e1 realizada a m\u00e9dia simples da avalia\u00e7\u00e3o anterior com a recupera\u00e7\u00e3o. Atividades n\u00e3o entregues n\u00e3o ter\u00e3o possibilidade de nova avalia\u00e7\u00e3o. \n\n\nIntegridade Acad\u00eamica\n\n\nA constata\u00e7\u00e3o de cola ou pl\u00e1gio em qualquer atividade avaliada (prova ou atividade pr\u00e1tica) implicar\u00e1 em reprova\u00e7\u00e3o na disciplina dos alunos envolvidos, com nota zero. Entende-se por envolvidos tanto os alunos que fizeram a cola (ou pl\u00e1gio) como os que permitiram que ela fosse feita. Dependendo da gravidade do incidente, as devidas autoridades institucionais ser\u00e3o acionadas para a ado\u00e7\u00e3o das san\u00e7\u00f5es disciplinares cab\u00edveis. \n\n\nNa d\u00favida do que se considera pl\u00e1gio, o professor deve ser consultado antes da entrega do trabalho em quest\u00e3o.", 
            "title": "Home"
        }, 
        {
            "location": "/#projeto-integrado-3", 
            "text": "Este site \u00e9 a apostila digital da disciplina  Projeto integrado 3 , ministrada no 2\u00ba semestre de 2016 no curso de Tecnologia em Jogos Digitais da PUC-Campinas. Aqui voc\u00ea encontra os links para materiais te\u00f3ricos e pr\u00e1ticos, assim como outras informa\u00e7\u00f5es relevantes.", 
            "title": "Projeto Integrado 3"
        }, 
        {
            "location": "/#cronograma", 
            "text": "Data  Conte\u00fado      03/08  Introdu\u00e7\u00e3o ao Projeto Integrado 3    10/08  Divis\u00e3o de grupos /  Introdu\u00e7\u00e3o \u00e0 arquitetura de software    17/08  Apresenta\u00e7\u00e3o de conceitos /  Introdu\u00e7\u00e3o ao game design 3D    24/08  Playtest 1 (prot\u00f3tipos)    31/08  Greenlight de projetos    07/09  Feriado    14/09  Semana Integrada    21/09  Versionamento e controle de qualidade    28/09  Playtest 2 (primeiro jog\u00e1vel)    05/10  Game design 3D: c\u00e2meras    12/10  Feriado    19/10  Game design 3D: workflow    26/10  Playtest 3 (alfa)    02/11  Feriado    09/11  Game design 3D: shaders    16/11  Playtest 4 (beta)    23/11  Apresenta\u00e7\u00f5es    30/11  Apresenta\u00e7\u00f5es    07/12  Sess\u00e3o de jogos e debate    14/12  Fechamento da disciplina", 
            "title": "Cronograma"
        }, 
        {
            "location": "/#plano-de-ensino", 
            "text": "", 
            "title": "Plano de ensino"
        }, 
        {
            "location": "/#ementa", 
            "text": "Correlacionar os conte\u00fados das disciplinas ministradas at\u00e9 o momento, e direcionar o conte\u00fado apreendido para a pr\u00e1tica profissional. Normas da ABNT. Relat\u00f3rio T\u00e9cnico de apresenta\u00e7\u00e3o de trabalhos. Desenvolvimento de trilhas sonoras e aberturas de jogos digitais.", 
            "title": "Ementa"
        }, 
        {
            "location": "/#objetivos-gerais", 
            "text": "Iniciar a produ\u00e7\u00e3o do projeto final reunindo as t\u00e9cnicas apreendidas em outras disciplinas.", 
            "title": "Objetivos gerais"
        }, 
        {
            "location": "/#objetivos-especificos", 
            "text": "Reunir os conhecimentos apreendidos em outras disciplinas; Elucidar como as pr\u00e1ticas que ocorrem em outras disciplinas se reunem na elabora\u00e7\u00e3o do jogo Estudar elementos fundamentais do desenvolvimento do Projeto de Jogo.", 
            "title": "Objetivos espec\u00edficos"
        }, 
        {
            "location": "/#conteudo-programatico", 
            "text": "Abordagens e discuss\u00f5es sobre os projetos em desenvolvimento em semestres anteriores:  Buscando ideias diferentes e inovadoras para desenvolver    Desenvolvendo o Projeto de game: retomando ou iniciando a documenta\u00e7\u00e3o do projeto   Arte e programa\u00e7\u00e3o: estudo do material j\u00e1 executado para continuidade de projeto j\u00e1 iniciado em disciplinas de Projeto Integrado anterior.  Desenvolvimento do conte\u00fado visual e estrutura do jogo: do jogo \u00e0 sua divulga\u00e7\u00e3o;  Unindo som e imagem para composi\u00e7\u00e3o do jogo", 
            "title": "Conte\u00fado program\u00e1tico"
        }, 
        {
            "location": "/#avaliacao", 
            "text": "A avalia\u00e7\u00e3o ser\u00e1 constitu\u00edda de 3 componentes principais:   Avalia\u00e7\u00e3o continuada individual : atividades entregues no decorre da disciplina, abordando t\u00f3picos tratados em sala.  Avalia\u00e7\u00e3o continuada coletiva : atividades entregues no decorrer da disciplina, tratando do desenvolvimento de projetos coletivos  Avalia\u00e7\u00e3o final coletiva : entrega e apresenta\u00e7\u00e3o de portfolio final de projeto", 
            "title": "Avalia\u00e7\u00e3o"
        }, 
        {
            "location": "/#nota-final", 
            "text": "(Atividades individuais x 3) + (Atividades coletivas x 3) + (Portf\u00f3lio final x 4)", 
            "title": "Nota final"
        }, 
        {
            "location": "/#recuperacao", 
            "text": "As atividades com avalia\u00e7\u00e3o insuficiente poder\u00e3o ser refeitas e entregues em novas datas para nova avalia\u00e7\u00e3o. Ser\u00e1 realizada a m\u00e9dia simples da avalia\u00e7\u00e3o anterior com a recupera\u00e7\u00e3o. Atividades n\u00e3o entregues n\u00e3o ter\u00e3o possibilidade de nova avalia\u00e7\u00e3o.", 
            "title": "Recupera\u00e7\u00e3o"
        }, 
        {
            "location": "/#integridade-academica", 
            "text": "A constata\u00e7\u00e3o de cola ou pl\u00e1gio em qualquer atividade avaliada (prova ou atividade pr\u00e1tica) implicar\u00e1 em reprova\u00e7\u00e3o na disciplina dos alunos envolvidos, com nota zero. Entende-se por envolvidos tanto os alunos que fizeram a cola (ou pl\u00e1gio) como os que permitiram que ela fosse feita. Dependendo da gravidade do incidente, as devidas autoridades institucionais ser\u00e3o acionadas para a ado\u00e7\u00e3o das san\u00e7\u00f5es disciplinares cab\u00edveis.   Na d\u00favida do que se considera pl\u00e1gio, o professor deve ser consultado antes da entrega do trabalho em quest\u00e3o.", 
            "title": "Integridade Acad\u00eamica"
        }, 
        {
            "location": "/aulas/introd-proj3/", 
            "text": "Introdu\u00e7\u00e3o ao Projeto Integrado 3\n\n\nTema: Educa\u00e7\u00e3o ambiental\n\n\n\n\n\nLumino City\n da \nState of Play\n.\n\n\n\n\n\n\nBlockhood\n, da Plethora\n\n\n\n\n\nSimCityEDU\n, da GlassLab.\n\n\n\n\n\nCloud Chasers \u2013 Journey of Hope\n, da Blindflug Studios.\n\n\n\n\n\nFate of the World\n, por Soothsayer Games.\n\n\n\n\n\nShelter\n, da Might and Delight.", 
            "title": "Introdu\u00e7\u00e3o ao Projeto Integrado 3"
        }, 
        {
            "location": "/aulas/introd-proj3/#introducao-ao-projeto-integrado-3", 
            "text": "", 
            "title": "Introdu\u00e7\u00e3o ao Projeto Integrado 3"
        }, 
        {
            "location": "/aulas/introd-proj3/#tema-educacao-ambiental", 
            "text": "Lumino City  da  State of Play .   Blockhood , da Plethora   SimCityEDU , da GlassLab.   Cloud Chasers \u2013 Journey of Hope , da Blindflug Studios.   Fate of the World , por Soothsayer Games.   Shelter , da Might and Delight.", 
            "title": "Tema: Educa\u00e7\u00e3o ambiental"
        }, 
        {
            "location": "/aulas/arquitetura-software/", 
            "text": "Introdu\u00e7\u00e3o \u00e0 arquitetura de software\n\n\nOu \nDicas para organizar um projeto de software\n.\n\n\nRequisitos\n\n\nO objetivo de definir requisitos de qualidade \u00e9 diminuir os riscos durante o desenvolvimento de um software, evitando ter de corrigir erros no final do projeto (onde esses erros s\u00e3o mais caros).\n\n\nChecklist para avaliar requisitos\n\n\nO tipo de requisito que voc\u00ea vai precisar no seu projeto depende muito das caracter\u00edsticas espec\u00edficas do mesmo. No entanto, essas perguntas ajudam a ter uma ideia sobre quais requisitos s\u00e3o mais importantes e se a equipe n\u00e3o est\u00e1 esquecendo de nada.\n\n\nChecando a funcionalidade dos requisitos\n\n\n\n\nTodos os inputs est\u00e3o especificados (origem, tipo, precis\u00e3o, valores)?\n\n\nTodos os outputs est\u00e3o especificados (destino, precis\u00e3o, valores, formato)?\n\n\nAs interfaces entre hardware e software est\u00e3o especificadas?\n\n\nTodas as tarefas que o usu\u00e1rio pode realizar est\u00e3o especificadas?\n\n\nOs dados necess\u00e1rios para cada tarefa e resultantes dela est\u00e3o especificados?\n\n\n\n\nChecando a qualidade dos requisitos\n\n\n\n\nOs requisitos est\u00e3o escritos na linguagem do usu\u00e1rio? Um jogador os entenderia?\n\n\nCada requisito evita conflito com outros requisitos?\n\n\nTrocas entre requisitos que possam competir entre si est\u00e3o especificadas?\n\n\nOs requisitos evitam definir um design espec\u00edfico?\n\n\nTodos os requisitos est\u00e3o num n\u00edvel consistente de detalhe? Alguns deveriam estar mais ou menos detalhados?\n\n\nOs requisitos est\u00e3o claros o suficiente que poderiam ser entregues a outro grupo para serem constru\u00eddos? \n\n\nCada item \u00e9 relevante \u00e0 solu\u00e7\u00e3o do problema? \u00c9 poss\u00edvel tra\u00e7ar a origem de cada item em rela\u00e7\u00e3o ao problema sendo resolvido?\n\n\n\u00c9 poss\u00edvel testar cada requisito? Testes independentes ser\u00e3o capazes de verificar se cada item foi satisfeito?\n\n\nAs poss\u00edveis mudan\u00e7as aos requerimentos foram especificadas, incluindo a probabilidade de que ocorram?\n\n\n\n\nChecando a completude dos requisitos\n\n\n\n\nAs informa\u00e7\u00f5es que ainda n\u00e3o est\u00e3o dispon\u00edveis no in\u00edcio do projeto est\u00e3o marcadas?\n\n\nSe todos os requisitos forem satisfeitos, o produto ser\u00e1 considerado completo?\n\n\nVoc\u00ea est\u00e1 confort\u00e1vel com todos os requisitos? J\u00e1 foram eliminados requisitos que s\u00e3o imposs\u00edveis de implementar ou criados por motivos irrelevantes?\n\n\n\n\nArquitetura\n\n\nA arquitetura de um software (ou de um sistema) refere-se a restri\u00e7\u00f5es e decis\u00f5es que se aplicam ao sistema como um todo e n\u00e3o apenas partes dele. Ela prov\u00e9m a estrutura necess\u00e1ria para manter a integridade conceitual de um sistema desde os n\u00edveis mais altos at\u00e9 os mais baixos. Ela facilita a divis\u00e3o de trabalho, permitindo que desenvolvedores trabalhem em paralelo e coletivamente.\n\n\nEsse \u00e9 um tema multi-facetado e complexo, ent\u00e3o vamos listar alguns dos componentes a serem considerados.\n\n\nOrganiza\u00e7\u00e3o do programa\n\n\nExplica em termos amplos a organiza\u00e7\u00e3o interna do programa, assim como as justificativas para o mesmo, definindo os blocos principais de constru\u00e7\u00e3o do programa. Tamb\u00e9m devem ser definidas as responsabilidades de cada bloco, de forma que todos os requisitos listados anteriormente devem estar cobertos.\n\n\nPrincipais classes\n\n\nA arquitetura deve identificar as principais classes a serem usadas e suas responsabilidades, assim como uma explica\u00e7\u00e3o da hierarquia de classes, transi\u00e7\u00f5es e persist\u00eancia de objetos. Ela n\u00e3o precisa especificar todas as classes do sistema, procure definir pelo menos os 20% mais importantes (que determinam 80% do comportamento do programa).\n\n\nEstruturas e design de dados\n\n\nA arquitetura deve tamb\u00e9m descrever as principais fontes de informa\u00e7\u00e3o, a persist\u00eancia dessa informa\u00e7\u00e3o, quais blocos t\u00eam acesso a essa informa\u00e7\u00e3o, mas mantendo-se numa descri\u00e7\u00e3o de alto n\u00edvel. Dessa forma, a responsabilidade de realizar o design das caracter\u00edsticas concretas do sistema ainda s\u00e3o dos desenvolvedores finais.\n\n\nInterface de usu\u00e1rio\n\n\nA arquitetura deve especificar os principais elementos (ou conjuntos) presentes na interface do usu\u00e1rio. Se poss\u00edvel, deve especificar como tornar o sistema modularizado o suficiente para permitir altera\u00e7\u00f5es mais adiante e trocas de interface sem maiores problemas.\n\n\nGerenciamento de recursos e performance\n\n\nA arquitetura deve delinear um plano para como lidar com as limita\u00e7\u00f5es de recursos, como mem\u00f3ria, gr\u00e1ficos, canais de som e outros. Ela tamb\u00e9m deve prever estimativas de performance e justficativas para as mesmas. Essa defini\u00e7\u00e3o deve ser clara o suficiente para evitar desperd\u00edcio de trabalho mais adiante no processo.\n\n\nEscalabilidade e interoperabilidade\n\n\nA arquitetura deve definir o quanto o sistema deve estar h\u00e1bil a crescer de acordo com demandas futuras e como raliz\u00e1-lo (em um n\u00edvel de especifica\u00e7\u00e3o alto). Isso \u00e9 fundamental quando pensamos em multijogador ou sistemas com bancos de dados. O mesmo vale para a capacidade do sistema de compartilhar dados e recursos com outras plataformas: quais ser\u00e3o essas e como o sistema ir\u00e1 faz\u00ea-lo devem ser descritos.\n\n\nInternacionaliza\u00e7\u00e3o\n\n\n\u00c9 preciso descrever como o sistema vai lidar com a quest\u00e3o da localiza\u00e7\u00e3o e da internacionaliza\u00e7\u00e3o de seu conte\u00fado e interfaces. \n\n\nProcessamento de erros e toler\u00e2ncia\n\n\nA arquitetura tamb\u00e9m \u00e9 respons\u00e1vel por definir como o programa vai tratar de erros em suas diversas partes, assim como qual ser\u00e1 a abordagem assumida pelas classes e sistemas. \n\n\n\n\nO processamento de erros ser\u00e1 corretivo ou apenas detec\u00e7\u00e3o?\n\n\n\u00c9 uma detec\u00e7\u00e3o passiva ou ativa? O rpgroama vai tentar ativamente checar erros ou vai postergar essa checagem?\n\n\nComo o programa propaga erros? Ele trata localmente ou repassa para uma classe espec\u00edfica?\n\n\nQuais s\u00e3o as conven\u00e7\u00f5es a ser seguidas nas mensagens e tratamento de erros?\n\n\nOnde ser\u00e3o criadas \nexceptions\n e em que n\u00edvel do programa ser\u00e3o os erros tratados?\n\n\nQual \u00e9 a responsabilidade de cada classe em rela\u00e7\u00e3o a seus inputs e outputs?\n\n\nSer\u00e3o criadas ferramentas pr\u00f3prias ou ferramentas do seu ambiente de desenvolvimento?\n\n\n\n\nViabilidade da arquitetura\n\n\nA arquitetura deve demosntrar que o sistema \u00e9 tecnicamente vi\u00e1vel com os recursos existentes, ambientes de desenvolvimento e outras limita\u00e7\u00f5es do projeto. As alternativas e quest\u00f5es onde essa viabilidade est\u00e1 em risco devem ser justificadas e testadas atrav\u00e9s de prot\u00f3tipos, pesquisa e provas de conceito.\n\n\nChecando a qualidade da arquitetura\n\n\n\n\nA arquitetura cobre todos os requisitos?\n\n\nAlguma parte est\u00e1 sobre ou sub especificada?\n\n\nA arquitetura como um todo forma um conjunto conceitual?\n\n\nO design de alto n\u00edvel \u00e9 independente do hardware e software que vai constru\u00ed-lo?\n\n\nAs motiva\u00e7\u00f5es de todas as grandes decis\u00f5es est\u00e3o explicadas?\n\n\nVoc\u00ea, como programador, est\u00e1 confort\u00e1vel com a arquitetura que vai implementar?\n\n\n\n\nProcesso de design de software (C4)\n\n\n\n\nA estrutura b\u00e1sica desse processo (que pode ser chamado de C4, como definido por Brown (2015)) \u00e9:\n\n\n\n\nContexto: onde o sistema est\u00e1 loxalizado, em rela\u00e7\u00e3o a usu\u00e1rios e outros sistemas\n\n\nContainers: diferentes execut\u00e1veis e processos, bancos de dados e entidades dentro do sistema\n\n\nComponentes: diferentes subsistemas com preocupa\u00e7\u00f5es bem demarcadas e que se comunicam entre si\n\n\nClasses: divis\u00e3o em classes, focando primeiro em sua interface p\u00fablica e depois nas suas partes privadas\n\n\nDivis\u00e3o em rotinas / fun\u00e7\u00f5es\n\n\nDesign interno nas fun\u00e7\u00f5es\n\n\n\n\n\n\n\n\nCada etapa tem um foco diferente e escopos diferentes. Enquanto as duas primeiras mostram o sistema como um todo, a parte de componentes \u00e9 um recorte com mais informa\u00e7\u00f5es e detalhes mais refinados devem aparecer apenas na defini\u00e7\u00e3o de classes. \u00c9 comum j\u00e1 incluir anota\u00e7\u00f5es sobre responsabilidades de cada elemento e as tecnologias envolvidas o quanto antes (normalmente a partir da eta de containers).\n\n\n\n\nAlgumas heur\u00edsticas a serem consideradas nesse processo:\n\n\n\n\nEncontrar objetos do mundo real\n\n\nConstruir abstra\u00e7\u00f5es consistentes\n\n\nEncapsular detalhes de implementa\u00e7\u00e3o\n\n\nHerdar quando poss\u00edvel\n\n\nEsconder segredos\n\n\nIdentificar \u00e1reas que provavelmente v\u00e3o mudar\n\n\nManter os elos fracos\n\n\nProcure padr\u00f5es de projeto recorrentes\n\n\n\n\nNa hora de formalizar esse tipo de design (especialmente a parte relativa a classes) \u00e9 bastante \u00fatil a conven\u00e7\u00e3o de \ndiagramas de classe UML\n, que especifica diferentes rela\u00e7\u00f5es entre classes e suas representa\u00e7\u00f5es gr\u00e1ficas. Para criar esse tipo de diagrama numa vers\u00e3o mais leg\u00edvel que a manual (como um refino posterior, por exemplo) pode-se usar a ferramenta online \ndraw.io\n.\n\n\n\n\nRefer\u00eancias\n\n\nBROWN, S. \nSoftware Architecture for Developers.\n [s.l.] LeanPub, 2015. \n\n\nMCCONNELL, S. \nCode Complete: A Practical Handbook of Software Construction\n. 2 ed. Redmond, Wash: Microsoft Press, 2004.", 
            "title": "Introdu\u00e7\u00e3o \u00e0 arquitetura de software"
        }, 
        {
            "location": "/aulas/arquitetura-software/#introducao-a-arquitetura-de-software", 
            "text": "Ou  Dicas para organizar um projeto de software .", 
            "title": "Introdu\u00e7\u00e3o \u00e0 arquitetura de software"
        }, 
        {
            "location": "/aulas/arquitetura-software/#requisitos", 
            "text": "O objetivo de definir requisitos de qualidade \u00e9 diminuir os riscos durante o desenvolvimento de um software, evitando ter de corrigir erros no final do projeto (onde esses erros s\u00e3o mais caros).", 
            "title": "Requisitos"
        }, 
        {
            "location": "/aulas/arquitetura-software/#checklist-para-avaliar-requisitos", 
            "text": "O tipo de requisito que voc\u00ea vai precisar no seu projeto depende muito das caracter\u00edsticas espec\u00edficas do mesmo. No entanto, essas perguntas ajudam a ter uma ideia sobre quais requisitos s\u00e3o mais importantes e se a equipe n\u00e3o est\u00e1 esquecendo de nada.", 
            "title": "Checklist para avaliar requisitos"
        }, 
        {
            "location": "/aulas/arquitetura-software/#checando-a-funcionalidade-dos-requisitos", 
            "text": "Todos os inputs est\u00e3o especificados (origem, tipo, precis\u00e3o, valores)?  Todos os outputs est\u00e3o especificados (destino, precis\u00e3o, valores, formato)?  As interfaces entre hardware e software est\u00e3o especificadas?  Todas as tarefas que o usu\u00e1rio pode realizar est\u00e3o especificadas?  Os dados necess\u00e1rios para cada tarefa e resultantes dela est\u00e3o especificados?", 
            "title": "Checando a funcionalidade dos requisitos"
        }, 
        {
            "location": "/aulas/arquitetura-software/#checando-a-qualidade-dos-requisitos", 
            "text": "Os requisitos est\u00e3o escritos na linguagem do usu\u00e1rio? Um jogador os entenderia?  Cada requisito evita conflito com outros requisitos?  Trocas entre requisitos que possam competir entre si est\u00e3o especificadas?  Os requisitos evitam definir um design espec\u00edfico?  Todos os requisitos est\u00e3o num n\u00edvel consistente de detalhe? Alguns deveriam estar mais ou menos detalhados?  Os requisitos est\u00e3o claros o suficiente que poderiam ser entregues a outro grupo para serem constru\u00eddos?   Cada item \u00e9 relevante \u00e0 solu\u00e7\u00e3o do problema? \u00c9 poss\u00edvel tra\u00e7ar a origem de cada item em rela\u00e7\u00e3o ao problema sendo resolvido?  \u00c9 poss\u00edvel testar cada requisito? Testes independentes ser\u00e3o capazes de verificar se cada item foi satisfeito?  As poss\u00edveis mudan\u00e7as aos requerimentos foram especificadas, incluindo a probabilidade de que ocorram?", 
            "title": "Checando a qualidade dos requisitos"
        }, 
        {
            "location": "/aulas/arquitetura-software/#checando-a-completude-dos-requisitos", 
            "text": "As informa\u00e7\u00f5es que ainda n\u00e3o est\u00e3o dispon\u00edveis no in\u00edcio do projeto est\u00e3o marcadas?  Se todos os requisitos forem satisfeitos, o produto ser\u00e1 considerado completo?  Voc\u00ea est\u00e1 confort\u00e1vel com todos os requisitos? J\u00e1 foram eliminados requisitos que s\u00e3o imposs\u00edveis de implementar ou criados por motivos irrelevantes?", 
            "title": "Checando a completude dos requisitos"
        }, 
        {
            "location": "/aulas/arquitetura-software/#arquitetura", 
            "text": "A arquitetura de um software (ou de um sistema) refere-se a restri\u00e7\u00f5es e decis\u00f5es que se aplicam ao sistema como um todo e n\u00e3o apenas partes dele. Ela prov\u00e9m a estrutura necess\u00e1ria para manter a integridade conceitual de um sistema desde os n\u00edveis mais altos at\u00e9 os mais baixos. Ela facilita a divis\u00e3o de trabalho, permitindo que desenvolvedores trabalhem em paralelo e coletivamente.  Esse \u00e9 um tema multi-facetado e complexo, ent\u00e3o vamos listar alguns dos componentes a serem considerados.", 
            "title": "Arquitetura"
        }, 
        {
            "location": "/aulas/arquitetura-software/#organizacao-do-programa", 
            "text": "Explica em termos amplos a organiza\u00e7\u00e3o interna do programa, assim como as justificativas para o mesmo, definindo os blocos principais de constru\u00e7\u00e3o do programa. Tamb\u00e9m devem ser definidas as responsabilidades de cada bloco, de forma que todos os requisitos listados anteriormente devem estar cobertos.", 
            "title": "Organiza\u00e7\u00e3o do programa"
        }, 
        {
            "location": "/aulas/arquitetura-software/#principais-classes", 
            "text": "A arquitetura deve identificar as principais classes a serem usadas e suas responsabilidades, assim como uma explica\u00e7\u00e3o da hierarquia de classes, transi\u00e7\u00f5es e persist\u00eancia de objetos. Ela n\u00e3o precisa especificar todas as classes do sistema, procure definir pelo menos os 20% mais importantes (que determinam 80% do comportamento do programa).", 
            "title": "Principais classes"
        }, 
        {
            "location": "/aulas/arquitetura-software/#estruturas-e-design-de-dados", 
            "text": "A arquitetura deve tamb\u00e9m descrever as principais fontes de informa\u00e7\u00e3o, a persist\u00eancia dessa informa\u00e7\u00e3o, quais blocos t\u00eam acesso a essa informa\u00e7\u00e3o, mas mantendo-se numa descri\u00e7\u00e3o de alto n\u00edvel. Dessa forma, a responsabilidade de realizar o design das caracter\u00edsticas concretas do sistema ainda s\u00e3o dos desenvolvedores finais.", 
            "title": "Estruturas e design de dados"
        }, 
        {
            "location": "/aulas/arquitetura-software/#interface-de-usuario", 
            "text": "A arquitetura deve especificar os principais elementos (ou conjuntos) presentes na interface do usu\u00e1rio. Se poss\u00edvel, deve especificar como tornar o sistema modularizado o suficiente para permitir altera\u00e7\u00f5es mais adiante e trocas de interface sem maiores problemas.", 
            "title": "Interface de usu\u00e1rio"
        }, 
        {
            "location": "/aulas/arquitetura-software/#gerenciamento-de-recursos-e-performance", 
            "text": "A arquitetura deve delinear um plano para como lidar com as limita\u00e7\u00f5es de recursos, como mem\u00f3ria, gr\u00e1ficos, canais de som e outros. Ela tamb\u00e9m deve prever estimativas de performance e justficativas para as mesmas. Essa defini\u00e7\u00e3o deve ser clara o suficiente para evitar desperd\u00edcio de trabalho mais adiante no processo.", 
            "title": "Gerenciamento de recursos e performance"
        }, 
        {
            "location": "/aulas/arquitetura-software/#escalabilidade-e-interoperabilidade", 
            "text": "A arquitetura deve definir o quanto o sistema deve estar h\u00e1bil a crescer de acordo com demandas futuras e como raliz\u00e1-lo (em um n\u00edvel de especifica\u00e7\u00e3o alto). Isso \u00e9 fundamental quando pensamos em multijogador ou sistemas com bancos de dados. O mesmo vale para a capacidade do sistema de compartilhar dados e recursos com outras plataformas: quais ser\u00e3o essas e como o sistema ir\u00e1 faz\u00ea-lo devem ser descritos.", 
            "title": "Escalabilidade e interoperabilidade"
        }, 
        {
            "location": "/aulas/arquitetura-software/#internacionalizacao", 
            "text": "\u00c9 preciso descrever como o sistema vai lidar com a quest\u00e3o da localiza\u00e7\u00e3o e da internacionaliza\u00e7\u00e3o de seu conte\u00fado e interfaces.", 
            "title": "Internacionaliza\u00e7\u00e3o"
        }, 
        {
            "location": "/aulas/arquitetura-software/#processamento-de-erros-e-tolerancia", 
            "text": "A arquitetura tamb\u00e9m \u00e9 respons\u00e1vel por definir como o programa vai tratar de erros em suas diversas partes, assim como qual ser\u00e1 a abordagem assumida pelas classes e sistemas.    O processamento de erros ser\u00e1 corretivo ou apenas detec\u00e7\u00e3o?  \u00c9 uma detec\u00e7\u00e3o passiva ou ativa? O rpgroama vai tentar ativamente checar erros ou vai postergar essa checagem?  Como o programa propaga erros? Ele trata localmente ou repassa para uma classe espec\u00edfica?  Quais s\u00e3o as conven\u00e7\u00f5es a ser seguidas nas mensagens e tratamento de erros?  Onde ser\u00e3o criadas  exceptions  e em que n\u00edvel do programa ser\u00e3o os erros tratados?  Qual \u00e9 a responsabilidade de cada classe em rela\u00e7\u00e3o a seus inputs e outputs?  Ser\u00e3o criadas ferramentas pr\u00f3prias ou ferramentas do seu ambiente de desenvolvimento?", 
            "title": "Processamento de erros e toler\u00e2ncia"
        }, 
        {
            "location": "/aulas/arquitetura-software/#viabilidade-da-arquitetura", 
            "text": "A arquitetura deve demosntrar que o sistema \u00e9 tecnicamente vi\u00e1vel com os recursos existentes, ambientes de desenvolvimento e outras limita\u00e7\u00f5es do projeto. As alternativas e quest\u00f5es onde essa viabilidade est\u00e1 em risco devem ser justificadas e testadas atrav\u00e9s de prot\u00f3tipos, pesquisa e provas de conceito.", 
            "title": "Viabilidade da arquitetura"
        }, 
        {
            "location": "/aulas/arquitetura-software/#checando-a-qualidade-da-arquitetura", 
            "text": "A arquitetura cobre todos os requisitos?  Alguma parte est\u00e1 sobre ou sub especificada?  A arquitetura como um todo forma um conjunto conceitual?  O design de alto n\u00edvel \u00e9 independente do hardware e software que vai constru\u00ed-lo?  As motiva\u00e7\u00f5es de todas as grandes decis\u00f5es est\u00e3o explicadas?  Voc\u00ea, como programador, est\u00e1 confort\u00e1vel com a arquitetura que vai implementar?", 
            "title": "Checando a qualidade da arquitetura"
        }, 
        {
            "location": "/aulas/arquitetura-software/#processo-de-design-de-software-c4", 
            "text": "A estrutura b\u00e1sica desse processo (que pode ser chamado de C4, como definido por Brown (2015)) \u00e9:   Contexto: onde o sistema est\u00e1 loxalizado, em rela\u00e7\u00e3o a usu\u00e1rios e outros sistemas  Containers: diferentes execut\u00e1veis e processos, bancos de dados e entidades dentro do sistema  Componentes: diferentes subsistemas com preocupa\u00e7\u00f5es bem demarcadas e que se comunicam entre si  Classes: divis\u00e3o em classes, focando primeiro em sua interface p\u00fablica e depois nas suas partes privadas  Divis\u00e3o em rotinas / fun\u00e7\u00f5es  Design interno nas fun\u00e7\u00f5es     Cada etapa tem um foco diferente e escopos diferentes. Enquanto as duas primeiras mostram o sistema como um todo, a parte de componentes \u00e9 um recorte com mais informa\u00e7\u00f5es e detalhes mais refinados devem aparecer apenas na defini\u00e7\u00e3o de classes. \u00c9 comum j\u00e1 incluir anota\u00e7\u00f5es sobre responsabilidades de cada elemento e as tecnologias envolvidas o quanto antes (normalmente a partir da eta de containers).   Algumas heur\u00edsticas a serem consideradas nesse processo:   Encontrar objetos do mundo real  Construir abstra\u00e7\u00f5es consistentes  Encapsular detalhes de implementa\u00e7\u00e3o  Herdar quando poss\u00edvel  Esconder segredos  Identificar \u00e1reas que provavelmente v\u00e3o mudar  Manter os elos fracos  Procure padr\u00f5es de projeto recorrentes   Na hora de formalizar esse tipo de design (especialmente a parte relativa a classes) \u00e9 bastante \u00fatil a conven\u00e7\u00e3o de  diagramas de classe UML , que especifica diferentes rela\u00e7\u00f5es entre classes e suas representa\u00e7\u00f5es gr\u00e1ficas. Para criar esse tipo de diagrama numa vers\u00e3o mais leg\u00edvel que a manual (como um refino posterior, por exemplo) pode-se usar a ferramenta online  draw.io .", 
            "title": "Processo de design de software (C4)"
        }, 
        {
            "location": "/aulas/arquitetura-software/#referencias", 
            "text": "BROWN, S.  Software Architecture for Developers.  [s.l.] LeanPub, 2015.   MCCONNELL, S.  Code Complete: A Practical Handbook of Software Construction . 2 ed. Redmond, Wash: Microsoft Press, 2004.", 
            "title": "Refer\u00eancias"
        }, 
        {
            "location": "/aulas/versionamento/", 
            "text": "Versionamento e controle de qualidade\n\n\nVersionamento sem\u00e2ntico\n\n\nUm dos maiores problemas no desenvolvimento de projetos \u00e9 o controle das diferentes vers\u00f5es envolvidas. Para isso, muitas vezes utilizamos vers\u00f5es num\u00e9ricas,mas cujos n\u00fameros n\u00e3o tem um significado muito claro, o que pode gerar confus\u00e3o e problemas de processo variados.\n\n\nPara organizar esse processo, foi criado o conceito de \nversionamento sem\u00e2ntico\n. Esse conceito defende o seguinte:\n\n\n\n\nDado um n\u00famero de vers\u00e3o MAJOR.MINOR.PATCH, incremente a:\n\n\n\n\nvers\u00e3o Maior(MAJOR): quando fizer mudan\u00e7as incompat\u00edveis na API,\n\n\nvers\u00e3o Menor(MINOR): quando adicionar funcionalidades mantendo compatibilidade, e\n\n\nvers\u00e3o de Corre\u00e7\u00e3o(PATCH): quando corrigir falhas mantendo compatibilidade.\n\n\n\n\nR\u00f3tulos adicionais para pr\u00e9-lan\u00e7amento(pre-release) e metadados de constru\u00e7\u00e3o(build) est\u00e3o dispon\u00edveis como extens\u00e3o ao formato MAJOR.MINOR.PATCH.\n\n\n\n\nDessa forma, est\u00e1 vis\u00edvel a compatibilidade de diferentes vers\u00f5es de software apenas de se olhar o n\u00famero das vers\u00f5es. Esse \u00e9 o principal benef\u00edcio dessa metodologia. Quanto aplicada a projetos de games, podemos interpret\u00e1-la da seguinte maneira:\n\n\n\n\nMAJOR\n como um grande milestone do projeto (alfa, beta, gold, updates-dlc);\n\n\nMINOR\n novas funcionalidades e corre\u00e7\u00f5es de bugs grandes;\n\n\nPATCH\n corre\u00e7\u00f5es de bugs e altera\u00e7\u00f5es pequenas em features existentes.\n\n\n\n\nVers\u00f5es tamb\u00e9m podem ser \nfixadas\n para uso posterior utilizando a ideia de \ntags ou releases\n presentes em sistemas de gerenciamento de vers\u00e3o como Git.\n\n\n\n\nExemplo da tela de releases do GitHub.\n\n\nGerenciamento de vers\u00f5es e Git\n\n\nO uso de sistemas de versionamento e controle de c\u00f3digo \u00e9 fundamental no desenvolvimento de software. Alguns tipos principais s\u00e3o Git, Mercurial e SVN. Vamos falar sobre Git.\n\n\nEsse tipo de controle de reposit\u00f3rio (o que seria o seu projeto) \u00e9 utilizado por muitas ferrametnas externas, como por exemplo o \nCloud Build da Unity\n, como fonte para servi\u00e7os de compila\u00e7\u00e3o e distribui\u00e7\u00e3o autom\u00e1tica para teste. Saber utilizar um reposit\u00f3rio \u00e9 requisito b\u00e1sico para poder utilizar essas ferramentas de forma efetiva.\n\n\nExemplo online interativo\n\n\nClique aqui para acessar o \nhttps://try.github.io/\n. Vamos seguir esse tutorial por algumas etapas.\n\n\nArquivos a ignorar\n\n\nEm uma pasta de projeto que est\u00e1 sendo versionada \u00e9 comum querer ignorar alguns arquivos que n\u00e3o s\u00e3o necess\u00e1rios para definir o projeto ou que ser\u00e3o gerados automaticamente pela m\u00e1quina de cada usu\u00e1rio. Isso \u00e9 definido em um arquivo de ignore. No caso do git, ele se chama \n.gitignore\n.\n\n\nAbaixo, um exemplo de \n.gitignore\n para uso em um reposit\u00f3rio com m\u00faltiplos projetos da Unity. Repare na inclus\u00e3o de todos os arquivos \n.meta\n e na exclus\u00e3o das pastas \nTemp\n, \nLibrary\n e \nObj\n.\n\n\n**[Ll]ibrary/\n**[Tt]emp/\n**[Oo]bj/\n\n# Autogenerated VS/MD solution and project files\n**.csproj\n**.unityproj\n**.sln\n**.apk\n**.sln.DotSettings.user\n**.suo\n**.userprefs\n**.pidb\n\n# include meta files\n!**.meta\n\n\n\n\nControle de qualidade\n\n\nQuando o projeto alcan\u00e7a determinados milestones, ou etapas significativas, \u00e9 importante realizar uma rodada de testes. Esse esfor\u00e7o em testar funcionalmente jogo torna-se cada vez mais importante conforme o projeto avan\u00e7a em seu ciclo de vida. \n\n\nDurante testes, \u00e9 importante informar corretamente sobre bugs encontrados. \u00c9 fundamental que sejam colhidas informa\u00e7\u00f5es sobre a repetibilidade (como fazer para reproduzir o bug), contexto (m\u00e1quina, sistema operacional, situa\u00e7\u00e3o de uso) e os efeitos do bug no jogo (glitches visuais, erros l\u00f3gicos, danos ao gameplay). Essas informa\u00e7\u00f5es facilitam a corre\u00e7\u00e3o do bug e permitem uma prioriza\u00e7\u00e3o correta dos esfor\u00e7os de programa\u00e7\u00e3o.\n\n\nCom os bugs coletados, \u00e9 importante prioriz\u00e1-los de forma a garantir que os bugs mais graves ser\u00e3o corrigidos primeiro. Para realizar essa prioriza\u00e7\u00e3o e classificar os bugs corretamente, alguns crit\u00e9rios s\u00e3o bastante utilizados:\n\n\n\n\n\u00c1rea\n do projeto (arte, programa\u00e7\u00e3o, som, etc)\n\n\nEtapa\n / milestone (quando deve estar corrigido)\n\n\nGravidade\n, dividida em:\n\n\nCr\u00edtico\n: quebra o jogo e impede que o jogador termine o que estava fazendo.\n\n\nMajor\n: algum problema recorrente e grave, mas que n\u00e3o quebra o jogo. O jogo n\u00e3o pode ser finalizado com qualquer um desses bugs.\n\n\nMinor\n: algum problema menor que pode ser corrigido em vers\u00f5es futuras sem maior impacto ou com frequ\u00eancia baixa.\n\n\n\n\n\n\n\n\nUma ferramenta bastante utilizada para realizar esse controle \u00e9 o sistema de issues do GitHub, que permite a cria\u00e7\u00e3o de novos tickets com informa\u00e7\u00f5es sobre bugs e problemas, al\u00e9m de integr\u00e1-los em ferramentas de controle de etapa (milestones) e um sistema de projetos semelhante a um mural de SCRUM / Trello.", 
            "title": "Versionamento e controle de qualidade"
        }, 
        {
            "location": "/aulas/versionamento/#versionamento-e-controle-de-qualidade", 
            "text": "", 
            "title": "Versionamento e controle de qualidade"
        }, 
        {
            "location": "/aulas/versionamento/#versionamento-semantico", 
            "text": "Um dos maiores problemas no desenvolvimento de projetos \u00e9 o controle das diferentes vers\u00f5es envolvidas. Para isso, muitas vezes utilizamos vers\u00f5es num\u00e9ricas,mas cujos n\u00fameros n\u00e3o tem um significado muito claro, o que pode gerar confus\u00e3o e problemas de processo variados.  Para organizar esse processo, foi criado o conceito de  versionamento sem\u00e2ntico . Esse conceito defende o seguinte:   Dado um n\u00famero de vers\u00e3o MAJOR.MINOR.PATCH, incremente a:   vers\u00e3o Maior(MAJOR): quando fizer mudan\u00e7as incompat\u00edveis na API,  vers\u00e3o Menor(MINOR): quando adicionar funcionalidades mantendo compatibilidade, e  vers\u00e3o de Corre\u00e7\u00e3o(PATCH): quando corrigir falhas mantendo compatibilidade.   R\u00f3tulos adicionais para pr\u00e9-lan\u00e7amento(pre-release) e metadados de constru\u00e7\u00e3o(build) est\u00e3o dispon\u00edveis como extens\u00e3o ao formato MAJOR.MINOR.PATCH.   Dessa forma, est\u00e1 vis\u00edvel a compatibilidade de diferentes vers\u00f5es de software apenas de se olhar o n\u00famero das vers\u00f5es. Esse \u00e9 o principal benef\u00edcio dessa metodologia. Quanto aplicada a projetos de games, podemos interpret\u00e1-la da seguinte maneira:   MAJOR  como um grande milestone do projeto (alfa, beta, gold, updates-dlc);  MINOR  novas funcionalidades e corre\u00e7\u00f5es de bugs grandes;  PATCH  corre\u00e7\u00f5es de bugs e altera\u00e7\u00f5es pequenas em features existentes.   Vers\u00f5es tamb\u00e9m podem ser  fixadas  para uso posterior utilizando a ideia de  tags ou releases  presentes em sistemas de gerenciamento de vers\u00e3o como Git.   Exemplo da tela de releases do GitHub.", 
            "title": "Versionamento sem\u00e2ntico"
        }, 
        {
            "location": "/aulas/versionamento/#gerenciamento-de-versoes-e-git", 
            "text": "O uso de sistemas de versionamento e controle de c\u00f3digo \u00e9 fundamental no desenvolvimento de software. Alguns tipos principais s\u00e3o Git, Mercurial e SVN. Vamos falar sobre Git.  Esse tipo de controle de reposit\u00f3rio (o que seria o seu projeto) \u00e9 utilizado por muitas ferrametnas externas, como por exemplo o  Cloud Build da Unity , como fonte para servi\u00e7os de compila\u00e7\u00e3o e distribui\u00e7\u00e3o autom\u00e1tica para teste. Saber utilizar um reposit\u00f3rio \u00e9 requisito b\u00e1sico para poder utilizar essas ferramentas de forma efetiva.", 
            "title": "Gerenciamento de vers\u00f5es e Git"
        }, 
        {
            "location": "/aulas/versionamento/#exemplo-online-interativo", 
            "text": "Clique aqui para acessar o  https://try.github.io/ . Vamos seguir esse tutorial por algumas etapas.", 
            "title": "Exemplo online interativo"
        }, 
        {
            "location": "/aulas/versionamento/#arquivos-a-ignorar", 
            "text": "Em uma pasta de projeto que est\u00e1 sendo versionada \u00e9 comum querer ignorar alguns arquivos que n\u00e3o s\u00e3o necess\u00e1rios para definir o projeto ou que ser\u00e3o gerados automaticamente pela m\u00e1quina de cada usu\u00e1rio. Isso \u00e9 definido em um arquivo de ignore. No caso do git, ele se chama  .gitignore .  Abaixo, um exemplo de  .gitignore  para uso em um reposit\u00f3rio com m\u00faltiplos projetos da Unity. Repare na inclus\u00e3o de todos os arquivos  .meta  e na exclus\u00e3o das pastas  Temp ,  Library  e  Obj .  **[Ll]ibrary/\n**[Tt]emp/\n**[Oo]bj/\n\n# Autogenerated VS/MD solution and project files\n**.csproj\n**.unityproj\n**.sln\n**.apk\n**.sln.DotSettings.user\n**.suo\n**.userprefs\n**.pidb\n\n# include meta files\n!**.meta", 
            "title": "Arquivos a ignorar"
        }, 
        {
            "location": "/aulas/versionamento/#controle-de-qualidade", 
            "text": "Quando o projeto alcan\u00e7a determinados milestones, ou etapas significativas, \u00e9 importante realizar uma rodada de testes. Esse esfor\u00e7o em testar funcionalmente jogo torna-se cada vez mais importante conforme o projeto avan\u00e7a em seu ciclo de vida.   Durante testes, \u00e9 importante informar corretamente sobre bugs encontrados. \u00c9 fundamental que sejam colhidas informa\u00e7\u00f5es sobre a repetibilidade (como fazer para reproduzir o bug), contexto (m\u00e1quina, sistema operacional, situa\u00e7\u00e3o de uso) e os efeitos do bug no jogo (glitches visuais, erros l\u00f3gicos, danos ao gameplay). Essas informa\u00e7\u00f5es facilitam a corre\u00e7\u00e3o do bug e permitem uma prioriza\u00e7\u00e3o correta dos esfor\u00e7os de programa\u00e7\u00e3o.  Com os bugs coletados, \u00e9 importante prioriz\u00e1-los de forma a garantir que os bugs mais graves ser\u00e3o corrigidos primeiro. Para realizar essa prioriza\u00e7\u00e3o e classificar os bugs corretamente, alguns crit\u00e9rios s\u00e3o bastante utilizados:   \u00c1rea  do projeto (arte, programa\u00e7\u00e3o, som, etc)  Etapa  / milestone (quando deve estar corrigido)  Gravidade , dividida em:  Cr\u00edtico : quebra o jogo e impede que o jogador termine o que estava fazendo.  Major : algum problema recorrente e grave, mas que n\u00e3o quebra o jogo. O jogo n\u00e3o pode ser finalizado com qualquer um desses bugs.  Minor : algum problema menor que pode ser corrigido em vers\u00f5es futuras sem maior impacto ou com frequ\u00eancia baixa.     Uma ferramenta bastante utilizada para realizar esse controle \u00e9 o sistema de issues do GitHub, que permite a cria\u00e7\u00e3o de novos tickets com informa\u00e7\u00f5es sobre bugs e problemas, al\u00e9m de integr\u00e1-los em ferramentas de controle de etapa (milestones) e um sistema de projetos semelhante a um mural de SCRUM / Trello.", 
            "title": "Controle de qualidade"
        }, 
        {
            "location": "/aulas/camera-3d/", 
            "text": "C\u00e2meras para jogos 3D\n\n\nUma parte fundamental da cria\u00e7\u00e3o de jogos em 3D \u00e9 o uso de c\u00e2meras para mostrar o ambiente e os personagens da forma mais adequada ao gameplay desejado. O controle de c\u00e2meras pode ter diversos n\u00edveis de complexidade e nem sempre uma c\u00e2mera mais complexa necessariamente \u00e9 mais eficiente para um jogo. A seguir, vamos ver como implementar e as principais caracter\u00edsticas de alguns tipos de c\u00e2meras para jogos 3D. \nO exemplo abaixo est\u00e1 dispon\u00edvel para download aqui\n.\n\n\n\n\nMovimento relativo \u00e0 c\u00e2mera\n\n\nAntes de falar de c\u00e2meras em si, um primeiro passo seria o de tornar o movimento do personagem ou avatar relativo \u00e0 c\u00e2mera, ou seja, apertar para frente move o jogador para a frente em rela\u00e7\u00e3o \u00e0 c\u00e2mera. Para isso, vamos utilizar o c\u00f3digo abaixo.\n\n\nvoid Update () {\n    _input = new Vector3(Input.GetAxis(\nHorizontal\n), 0, Input.GetAxis(\nVertical\n));\n    _input = Vector3.ClampMagnitude(_input, 1f);\n    Vector3 camForward = Camera.main.transform.forward;\n    _velTemp = Input.GetAxis(\nVertical\n) * camForward + Input.GetAxis(\nHorizontal\n) * Camera.main.transform.right;\n    _velTemp.y = 0f;\n    _velTemp = _velTemp.normalized * _input.magnitude;\n    _anim.SetFloat(\nspeed\n, _velTemp.magnitude);\n}\n\nvoid FixedUpdate()\n{\n    if (_input.sqrMagnitude \n= 0f)\n    {\n        return;\n    }\n    var vel = _velTemp * velocidade;\n    //var velAlvo = new Vector3(vel.x, _rb.velocity.y, vel.z);\n    transform.forward = Vector3.Slerp(transform.forward, _velTemp.normalized, Time.fixedDeltaTime * suavizar);\n    var finalVel = transform.forward * velocidade * _input.magnitude;\n    finalVel.y = _rb.velocity.y;\n    _rb.velocity = finalVel;\n}\n\n\n\n\nPonto fixo, \u00e2ngulo fixo\n\n\nEssa seria uma c\u00e2mera totalmente est\u00e1tica, posicionada de forma a sempre mostrar as mesmas coisas. \u00c9 a mais simples de configurar e \u00e9 bastante previs\u00edvel.\n\n\nPonto fixo, \u00e2ngulo vari\u00e1vel\n\n\nEssa c\u00e2mera rotaciona para acompanhar um alvo, mas mantendo uma certa posi\u00e7\u00e3o. Permite bastante controle por parte dos designers, mas mant\u00e9m o centro da aten\u00e7\u00e3o no avatar.\n\n\nvoid LateUpdate()\n{\n    transform.LookAt(alvo);\n}\n\n\n\n\nDist\u00e2ncia fixa, \u00e2ngulo fixo\n\n\nNesse tipo de c\u00e2mera, a dist\u00e2ncia e o \u00e2ngulo entre a c\u00e2mera e o avatar s\u00e3o sempre iguais, ou ent\u00e3o tentam ser na medida do poss\u00edvel (pode-se usar suaviza\u00e7\u00e3o para evitar movimentos bruscos). \u00c9 bastante simples de configurar, mas pode ser bastante interessante dependendo do tipo de movimento e espa\u00e7o que o jogo apresenta.\n\n\n\nvoid Start()\n{\n    offset = transform.position - alvo.position;\n}\n\nvoid FixedUpdate()\n{\n    Vector3 posicaoDesejada = alvo.position + offset;\n    posicaoDesejada = Vector3.Lerp(transform.position, posicaoDesejada, Time.fixedDeltaTime * suavizar);\n    transform.position = posicaoDesejada;\n    if(rotacionar)\n    {\n        transform.LookAt(alvo);\n    }\n}\n\n\n\n\nDist\u00e2ncia fixa, \u00e2ngulo vari\u00e1vel\n\n\nEssa \u00e9 uma c\u00e2mera bastante din\u00e2mica, que segue o personagem, al\u00e9m de permitir uma pequena varia\u00e7\u00e3o de enquadramento atrav\u00e9s de um offset. \u00c9 bastante utilizada, mas, por sua complexidade, tamb\u00e9m apresenta uma s\u00e9rie de problemas com colis\u00f5es, suaviza\u00e7\u00e3o e uso contextual (curvas, controle do usu\u00e1rio, etc).\n\n\nvoid Start()\n{\n    offset = alvo.transform.position - transform.position;\n}\n\nvoid LateUpdate()\n{\n    float anguloAtual = transform.eulerAngles.y;\n    float anguloDesejado = alvo.transform.eulerAngles.y;\n    float angle = Mathf.LerpAngle(anguloAtual, anguloDesejado, Time.smoothDeltaTime * suavizar);\n\n    Quaternion rotacao = Quaternion.Euler(0, angle, 0);\n    transform.position = alvo.transform.position - (rotacao * offset);\n\n    transform.LookAt(alvo.transform.position + offsetVisao);\n}\n\n\n\n\nRefer\u00eancias\n\n\nO \nv\u00eddeo de John Nesky\n, programador de c\u00e2meras de \nJourney\n, \u00e9 uma \u00f3tima refer\u00eancia para discutir a diversidade de problemas que c\u00e2meras em jogos 3D podem criar, assim como suas possibilidades expressivas.", 
            "title": "C\u00e2meras 3D"
        }, 
        {
            "location": "/aulas/camera-3d/#cameras-para-jogos-3d", 
            "text": "Uma parte fundamental da cria\u00e7\u00e3o de jogos em 3D \u00e9 o uso de c\u00e2meras para mostrar o ambiente e os personagens da forma mais adequada ao gameplay desejado. O controle de c\u00e2meras pode ter diversos n\u00edveis de complexidade e nem sempre uma c\u00e2mera mais complexa necessariamente \u00e9 mais eficiente para um jogo. A seguir, vamos ver como implementar e as principais caracter\u00edsticas de alguns tipos de c\u00e2meras para jogos 3D.  O exemplo abaixo est\u00e1 dispon\u00edvel para download aqui .", 
            "title": "C\u00e2meras para jogos 3D"
        }, 
        {
            "location": "/aulas/camera-3d/#movimento-relativo-a-camera", 
            "text": "Antes de falar de c\u00e2meras em si, um primeiro passo seria o de tornar o movimento do personagem ou avatar relativo \u00e0 c\u00e2mera, ou seja, apertar para frente move o jogador para a frente em rela\u00e7\u00e3o \u00e0 c\u00e2mera. Para isso, vamos utilizar o c\u00f3digo abaixo.  void Update () {\n    _input = new Vector3(Input.GetAxis( Horizontal ), 0, Input.GetAxis( Vertical ));\n    _input = Vector3.ClampMagnitude(_input, 1f);\n    Vector3 camForward = Camera.main.transform.forward;\n    _velTemp = Input.GetAxis( Vertical ) * camForward + Input.GetAxis( Horizontal ) * Camera.main.transform.right;\n    _velTemp.y = 0f;\n    _velTemp = _velTemp.normalized * _input.magnitude;\n    _anim.SetFloat( speed , _velTemp.magnitude);\n}\n\nvoid FixedUpdate()\n{\n    if (_input.sqrMagnitude  = 0f)\n    {\n        return;\n    }\n    var vel = _velTemp * velocidade;\n    //var velAlvo = new Vector3(vel.x, _rb.velocity.y, vel.z);\n    transform.forward = Vector3.Slerp(transform.forward, _velTemp.normalized, Time.fixedDeltaTime * suavizar);\n    var finalVel = transform.forward * velocidade * _input.magnitude;\n    finalVel.y = _rb.velocity.y;\n    _rb.velocity = finalVel;\n}", 
            "title": "Movimento relativo \u00e0 c\u00e2mera"
        }, 
        {
            "location": "/aulas/camera-3d/#ponto-fixo-angulo-fixo", 
            "text": "Essa seria uma c\u00e2mera totalmente est\u00e1tica, posicionada de forma a sempre mostrar as mesmas coisas. \u00c9 a mais simples de configurar e \u00e9 bastante previs\u00edvel.", 
            "title": "Ponto fixo, \u00e2ngulo fixo"
        }, 
        {
            "location": "/aulas/camera-3d/#ponto-fixo-angulo-variavel", 
            "text": "Essa c\u00e2mera rotaciona para acompanhar um alvo, mas mantendo uma certa posi\u00e7\u00e3o. Permite bastante controle por parte dos designers, mas mant\u00e9m o centro da aten\u00e7\u00e3o no avatar.  void LateUpdate()\n{\n    transform.LookAt(alvo);\n}", 
            "title": "Ponto fixo, \u00e2ngulo vari\u00e1vel"
        }, 
        {
            "location": "/aulas/camera-3d/#distancia-fixa-angulo-fixo", 
            "text": "Nesse tipo de c\u00e2mera, a dist\u00e2ncia e o \u00e2ngulo entre a c\u00e2mera e o avatar s\u00e3o sempre iguais, ou ent\u00e3o tentam ser na medida do poss\u00edvel (pode-se usar suaviza\u00e7\u00e3o para evitar movimentos bruscos). \u00c9 bastante simples de configurar, mas pode ser bastante interessante dependendo do tipo de movimento e espa\u00e7o que o jogo apresenta.  \nvoid Start()\n{\n    offset = transform.position - alvo.position;\n}\n\nvoid FixedUpdate()\n{\n    Vector3 posicaoDesejada = alvo.position + offset;\n    posicaoDesejada = Vector3.Lerp(transform.position, posicaoDesejada, Time.fixedDeltaTime * suavizar);\n    transform.position = posicaoDesejada;\n    if(rotacionar)\n    {\n        transform.LookAt(alvo);\n    }\n}", 
            "title": "Dist\u00e2ncia fixa, \u00e2ngulo fixo"
        }, 
        {
            "location": "/aulas/camera-3d/#distancia-fixa-angulo-variavel", 
            "text": "Essa \u00e9 uma c\u00e2mera bastante din\u00e2mica, que segue o personagem, al\u00e9m de permitir uma pequena varia\u00e7\u00e3o de enquadramento atrav\u00e9s de um offset. \u00c9 bastante utilizada, mas, por sua complexidade, tamb\u00e9m apresenta uma s\u00e9rie de problemas com colis\u00f5es, suaviza\u00e7\u00e3o e uso contextual (curvas, controle do usu\u00e1rio, etc).  void Start()\n{\n    offset = alvo.transform.position - transform.position;\n}\n\nvoid LateUpdate()\n{\n    float anguloAtual = transform.eulerAngles.y;\n    float anguloDesejado = alvo.transform.eulerAngles.y;\n    float angle = Mathf.LerpAngle(anguloAtual, anguloDesejado, Time.smoothDeltaTime * suavizar);\n\n    Quaternion rotacao = Quaternion.Euler(0, angle, 0);\n    transform.position = alvo.transform.position - (rotacao * offset);\n\n    transform.LookAt(alvo.transform.position + offsetVisao);\n}", 
            "title": "Dist\u00e2ncia fixa, \u00e2ngulo vari\u00e1vel"
        }, 
        {
            "location": "/aulas/camera-3d/#referencias", 
            "text": "O  v\u00eddeo de John Nesky , programador de c\u00e2meras de  Journey , \u00e9 uma \u00f3tima refer\u00eancia para discutir a diversidade de problemas que c\u00e2meras em jogos 3D podem criar, assim como suas possibilidades expressivas.", 
            "title": "Refer\u00eancias"
        }, 
        {
            "location": "/referencias/", 
            "text": "Refer\u00eancias\n\n\nLivros\n\n\nBROWN, S. \nSoftware Architecture for Developers.\n [s.l.] LeanPub, 2015. \n\n\nMADHAV, S. \nGame Programming Algorithms and Techniques: A Platform-Agnostic Approach.\n 1 edition ed. Indianapolis, IN: Addison-Wesley Professional, 2013. \n\n\nMCCONNELL, S. \nCode Complete: A Practical Handbook of Software Construction, Second Edition.\n 2nd edition ed. Redmond, Wash: Microsoft Press, 2004. \n\n\nWebsites\n\n\nNYSTROM, R. \nGame Programming Patterns.\n Dispon\u00edvel em: \nhttp://gameprogrammingpatterns.com/\n. Acesso em: 27 jul. 2015.", 
            "title": "Refer\u00eancias"
        }, 
        {
            "location": "/referencias/#referencias", 
            "text": "", 
            "title": "Refer\u00eancias"
        }, 
        {
            "location": "/referencias/#livros", 
            "text": "BROWN, S.  Software Architecture for Developers.  [s.l.] LeanPub, 2015.   MADHAV, S.  Game Programming Algorithms and Techniques: A Platform-Agnostic Approach.  1 edition ed. Indianapolis, IN: Addison-Wesley Professional, 2013.   MCCONNELL, S.  Code Complete: A Practical Handbook of Software Construction, Second Edition.  2nd edition ed. Redmond, Wash: Microsoft Press, 2004.", 
            "title": "Livros"
        }, 
        {
            "location": "/referencias/#websites", 
            "text": "NYSTROM, R.  Game Programming Patterns.  Dispon\u00edvel em:  http://gameprogrammingpatterns.com/ . Acesso em: 27 jul. 2015.", 
            "title": "Websites"
        }
    ]
}